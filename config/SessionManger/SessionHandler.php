<?php
namespace App\config\Session;
use SessionHandler;

define('SESSION_SAVE_PATH',dirname(realpath(__FILE__)) . DIRECTORY_SEPARATOR . 'sessions');
class SessionCustom extends SessionHandler {
    private $sessionMaxLifeTime=0;
    private $sessionName ='MYAPPSESS';
    private $sessionDomaine='localhost';
    private $sessionPath='/';
    private $sessionSsl=false;
    private $sessionHttpOnly=true;
    private $sessionCycleLife=1;


    private $sessionSavePath=SESSION_SAVE_PATH;
    //encrypt
   private $sessionCipherAlgo=MCRYPT_BLOWFISH;
   private $sessionMCRYPT_MODE=MCRYPT_MODE_ECB;
   private $KeyEncrypt='AMASsUo9948';

    function __construct()
    {
       //initial
        ini_set('session.use_cookies',1);
        ini_set('session.use_only_cookies',1);
        ini_set('session.use_trans_sid',0);
        ini_set('session.save_handler',env('session_saveHandler','files'));
        //config sessions
        session_save_path($this->sessionSavePath);
        session_name($this->sessionName);
        session_set_cookie_params(
            $this->sessionMaxLifeTime,
           $this->sessionPath,$this->sessionDomaine,
            $this->sessionSsl, $this->sessionHttpOnly);

         session_set_save_handler($this,true);
    }

    public function start()
    {
        if (session_id()===''){
           if (session_start()){

               $this->cheekSessionLife();

           }
        }
  }
  public function read( $id)
  {
    return mcrypt_decrypt($this->sessionCipherAlgo, $this->KeyEncrypt,parent::read($id) ,$this->sessionMCRYPT_MODE) ; // TODO: Change the autogenerated stub
  }
  public function write( $id,  $data)
  {
     return parent::write($id,mcrypt_encrypt($this->sessionCipherAlgo, $this->KeyEncrypt, $data, $this->sessionMCRYPT_MODE)); // TODO: Change the autogenerated stub
  }
  private function cheekSessionLife (){
      if (!isset($this->StartTime)){
          $this->StartTime=time();
          return $this->generateFingerPrint();
      }
      else {
          if ((time()-$this->StartTime) > ($this->sessionCycleLife*60)){
              session_regenerate_id(true);
              $this->StartTime=time();
               return $this->generateFingerPrint();
          }
          return false;
          }

  }
  public function kill():void
    {
        session_unset();
        setcookie($this->sessionName,'',time()-1000,$this->sessionPath,
            $this->sessionDomaine,$this->sessionSsl,$this->sessionHttpOnly);
        session_destroy();
  }
  public function isValidFingerPrint():bool
    {

        $fingerPrint=md5($_SERVER['HTTP_USER_AGENT'].$this->randomId.session_id());
       if ($this->fingerPrint ===$fingerPrint){
           return  true;
       }
       return false;
  }
  private function generateFingerPrint():bool{

          $this->randomId=random_bytes(16);
          $this->fingerPrint=md5($_SERVER['HTTP_USER_AGENT'].$this->randomId.session_id());
          return true ;

}
  public function __get(string $name)
  {
     return $_SESSION[$name]? $_SESSION[$name]:null;
  }
  public function __set(string $name, $value): void
  {
      $_SESSION[$name]=$value;
  }
  public function __isset(string $name): bool
  {
      return isset($_SESSION[$name]);
  }
  public function setCycleLife(int $life)
    {
        $this->sessionCycleLife=$life;
  }
    /**
     * @return int
     */
    public function getSessionCycleLife(): int
    {
        return $this->sessionCycleLife;
    }
    public function delete_se($id):bool{
        if ($this->__isset($id)) {
            unset($_SESSION[$id]);
            return true;
        }
        return false;
    }
}
//$path = dirname(realpath(__FILE__)) . DIRECTORY_SEPARATOR . 'sessions';
//
//session_save_path($path);
//
//session_set_cookie_params(0,'/','localhost',false,true);
//session_start();
//echo session_id() .'<br>';
//$_SESSION['gcdhghd']="im djgfds";
//session_regenerate_id();
//session_name('name of session')
//session_destroy(); delete session file from server ;
//session_unset();   delete data that where in session and array.
//session_destroy();
//echo session_cache_expire() .'<br>';
//echo session_cache_limiter() .'<br>';
//session_write_close();
//$_SESSION['void tset ']="the test is wored";
// mcrypt_enc_get_algorithms_name();
//$key="oussama";
//echo mcrypt_module_get_algo_key_size(MCRYPT_BLOWFISH);
//var_dump (mcrypt_decrypt(MCRYPT_BLOWFISH,$key));
//echo md5($key);
//cheekSessionLife() setS-T if null / regenerate S if (S) expired.
//if (!isset($this->fingerPrint))
